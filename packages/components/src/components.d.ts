/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Info } from "./types";
import { OptionType } from "./components/nl-select/nl-select";
export { Info } from "./types";
export { OptionType } from "./components/nl-select/nl-select";
export namespace Components {
    interface NlAuth {
        "bunkers": string;
        "startScreen": string;
        "theme": 'default' | 'ocean' | 'lemonade' | 'purple';
    }
    interface NlBanner {
        "isLoading": boolean;
        "nlTheme": 'default' | 'ocean' | 'lemonade' | 'purple';
        "notify": { test: string } | null;
        "titleBanner": string;
        "userInfo": Info | null;
    }
    interface NlButton {
        "nlTheme": 'default' | 'ocean' | 'lemonade' | 'purple';
        "titleBtn": string;
    }
    interface NlSelect {
        "darkMode": boolean;
        "options": OptionType[];
        "selected": number;
        "theme": 'default' | 'ocean' | 'lemonade' | 'purple';
    }
    interface NlSignin {
        "isOpen": boolean;
        "openModal": () => Promise<void>;
    }
    interface NlSignup {
        "isOpen": boolean;
        "openModal": () => Promise<void>;
    }
    interface NlWelcome {
        "isOpen": boolean;
        "openModal": () => Promise<void>;
    }
}
export interface NlAuthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNlAuthElement;
}
export interface NlBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNlBannerElement;
}
export interface NlSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNlSelectElement;
}
export interface NlSigninCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNlSigninElement;
}
export interface NlSignupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNlSignupElement;
}
export interface NlWelcomeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNlWelcomeElement;
}
declare global {
    interface HTMLNlAuthElementEventMap {
        "nlLogin": string;
        "nlSignup": string;
        "nlCloseModal": any;
        "nlCheckLogin": string;
        "nlCheckSignup": string;
    }
    interface HTMLNlAuthElement extends Components.NlAuth, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNlAuthElementEventMap>(type: K, listener: (this: HTMLNlAuthElement, ev: NlAuthCustomEvent<HTMLNlAuthElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNlAuthElementEventMap>(type: K, listener: (this: HTMLNlAuthElement, ev: NlAuthCustomEvent<HTMLNlAuthElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNlAuthElement: {
        prototype: HTMLNlAuthElement;
        new (): HTMLNlAuthElement;
    };
    interface HTMLNlBannerElementEventMap {
        "handleLoginBanner": string;
        "handleLogoutBanner": string;
    }
    interface HTMLNlBannerElement extends Components.NlBanner, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNlBannerElementEventMap>(type: K, listener: (this: HTMLNlBannerElement, ev: NlBannerCustomEvent<HTMLNlBannerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNlBannerElementEventMap>(type: K, listener: (this: HTMLNlBannerElement, ev: NlBannerCustomEvent<HTMLNlBannerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNlBannerElement: {
        prototype: HTMLNlBannerElement;
        new (): HTMLNlBannerElement;
    };
    interface HTMLNlButtonElement extends Components.NlButton, HTMLStencilElement {
    }
    var HTMLNlButtonElement: {
        prototype: HTMLNlButtonElement;
        new (): HTMLNlButtonElement;
    };
    interface HTMLNlSelectElementEventMap {
        "selectDomain": string;
    }
    interface HTMLNlSelectElement extends Components.NlSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNlSelectElementEventMap>(type: K, listener: (this: HTMLNlSelectElement, ev: NlSelectCustomEvent<HTMLNlSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNlSelectElementEventMap>(type: K, listener: (this: HTMLNlSelectElement, ev: NlSelectCustomEvent<HTMLNlSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNlSelectElement: {
        prototype: HTMLNlSelectElement;
        new (): HTMLNlSelectElement;
    };
    interface HTMLNlSigninElementEventMap {
        "handleGetValue": string;
    }
    interface HTMLNlSigninElement extends Components.NlSignin, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNlSigninElementEventMap>(type: K, listener: (this: HTMLNlSigninElement, ev: NlSigninCustomEvent<HTMLNlSigninElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNlSigninElementEventMap>(type: K, listener: (this: HTMLNlSigninElement, ev: NlSigninCustomEvent<HTMLNlSigninElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNlSigninElement: {
        prototype: HTMLNlSigninElement;
        new (): HTMLNlSigninElement;
    };
    interface HTMLNlSignupElementEventMap {
        "handleGetValue": string;
    }
    interface HTMLNlSignupElement extends Components.NlSignup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNlSignupElementEventMap>(type: K, listener: (this: HTMLNlSignupElement, ev: NlSignupCustomEvent<HTMLNlSignupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNlSignupElementEventMap>(type: K, listener: (this: HTMLNlSignupElement, ev: NlSignupCustomEvent<HTMLNlSignupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNlSignupElement: {
        prototype: HTMLNlSignupElement;
        new (): HTMLNlSignupElement;
    };
    interface HTMLNlWelcomeElementEventMap {
        "handleGetValue": string;
    }
    interface HTMLNlWelcomeElement extends Components.NlWelcome, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNlWelcomeElementEventMap>(type: K, listener: (this: HTMLNlWelcomeElement, ev: NlWelcomeCustomEvent<HTMLNlWelcomeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNlWelcomeElementEventMap>(type: K, listener: (this: HTMLNlWelcomeElement, ev: NlWelcomeCustomEvent<HTMLNlWelcomeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNlWelcomeElement: {
        prototype: HTMLNlWelcomeElement;
        new (): HTMLNlWelcomeElement;
    };
    interface HTMLElementTagNameMap {
        "nl-auth": HTMLNlAuthElement;
        "nl-banner": HTMLNlBannerElement;
        "nl-button": HTMLNlButtonElement;
        "nl-select": HTMLNlSelectElement;
        "nl-signin": HTMLNlSigninElement;
        "nl-signup": HTMLNlSignupElement;
        "nl-welcome": HTMLNlWelcomeElement;
    }
}
declare namespace LocalJSX {
    interface NlAuth {
        "bunkers"?: string;
        "onNlCheckLogin"?: (event: NlAuthCustomEvent<string>) => void;
        "onNlCheckSignup"?: (event: NlAuthCustomEvent<string>) => void;
        "onNlCloseModal"?: (event: NlAuthCustomEvent<any>) => void;
        "onNlLogin"?: (event: NlAuthCustomEvent<string>) => void;
        "onNlSignup"?: (event: NlAuthCustomEvent<string>) => void;
        "startScreen"?: string;
        "theme"?: 'default' | 'ocean' | 'lemonade' | 'purple';
    }
    interface NlBanner {
        "isLoading"?: boolean;
        "nlTheme"?: 'default' | 'ocean' | 'lemonade' | 'purple';
        "notify"?: { test: string } | null;
        "onHandleLoginBanner"?: (event: NlBannerCustomEvent<string>) => void;
        "onHandleLogoutBanner"?: (event: NlBannerCustomEvent<string>) => void;
        "titleBanner"?: string;
        "userInfo"?: Info | null;
    }
    interface NlButton {
        "nlTheme"?: 'default' | 'ocean' | 'lemonade' | 'purple';
        "titleBtn"?: string;
    }
    interface NlSelect {
        "darkMode"?: boolean;
        "onSelectDomain"?: (event: NlSelectCustomEvent<string>) => void;
        "options"?: OptionType[];
        "selected"?: number;
        "theme"?: 'default' | 'ocean' | 'lemonade' | 'purple';
    }
    interface NlSignin {
        "isOpen"?: boolean;
        "onHandleGetValue"?: (event: NlSigninCustomEvent<string>) => void;
    }
    interface NlSignup {
        "isOpen"?: boolean;
        "onHandleGetValue"?: (event: NlSignupCustomEvent<string>) => void;
    }
    interface NlWelcome {
        "isOpen"?: boolean;
        "onHandleGetValue"?: (event: NlWelcomeCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "nl-auth": NlAuth;
        "nl-banner": NlBanner;
        "nl-button": NlButton;
        "nl-select": NlSelect;
        "nl-signin": NlSignin;
        "nl-signup": NlSignup;
        "nl-welcome": NlWelcome;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "nl-auth": LocalJSX.NlAuth & JSXBase.HTMLAttributes<HTMLNlAuthElement>;
            "nl-banner": LocalJSX.NlBanner & JSXBase.HTMLAttributes<HTMLNlBannerElement>;
            "nl-button": LocalJSX.NlButton & JSXBase.HTMLAttributes<HTMLNlButtonElement>;
            "nl-select": LocalJSX.NlSelect & JSXBase.HTMLAttributes<HTMLNlSelectElement>;
            "nl-signin": LocalJSX.NlSignin & JSXBase.HTMLAttributes<HTMLNlSigninElement>;
            "nl-signup": LocalJSX.NlSignup & JSXBase.HTMLAttributes<HTMLNlSignupElement>;
            "nl-welcome": LocalJSX.NlWelcome & JSXBase.HTMLAttributes<HTMLNlWelcomeElement>;
        }
    }
}
