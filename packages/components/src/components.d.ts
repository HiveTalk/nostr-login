/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ModalAuth {
        "isOpen": boolean;
        "openModal": () => Promise<void>;
    }
}
export interface ModalAuthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLModalAuthElement;
}
declare global {
    interface HTMLModalAuthElementEventMap {
        "handleGetValue": string;
    }
    interface HTMLModalAuthElement extends Components.ModalAuth, HTMLStencilElement {
        addEventListener<K extends keyof HTMLModalAuthElementEventMap>(type: K, listener: (this: HTMLModalAuthElement, ev: ModalAuthCustomEvent<HTMLModalAuthElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLModalAuthElementEventMap>(type: K, listener: (this: HTMLModalAuthElement, ev: ModalAuthCustomEvent<HTMLModalAuthElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLModalAuthElement: {
        prototype: HTMLModalAuthElement;
        new (): HTMLModalAuthElement;
    };
    interface HTMLElementTagNameMap {
        "modal-auth": HTMLModalAuthElement;
    }
}
declare namespace LocalJSX {
    interface ModalAuth {
        "isOpen"?: boolean;
        "onHandleGetValue"?: (event: ModalAuthCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "modal-auth": ModalAuth;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "modal-auth": LocalJSX.ModalAuth & JSXBase.HTMLAttributes<HTMLModalAuthElement>;
        }
    }
}
